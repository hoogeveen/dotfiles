{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create command": {
		"prefix": "command",
		"body": [
			"import { CommandInterface } from \"@interfaces\";",
			"",
			"export class ${1:commandName} implements CommandInterface {",
			"",
			"}"
				
		],
		"description": "Create a command"
	},
	"Create Handler": {
		"prefix": "handler",
		"body": [
			"import \"reflect-metadata\"",
			"",
			"import { injectable } from \"inversify\"",
			"",
			"import { CommandHandlerInterface } from \"@interfaces\"",
			"",
			"@injectable()",
			"export class ${1:handlerName}Handler implements CommandHandlerInterface {",
			"",
				"async handle(command: ${1:handlerName}Command) {",
					"${2:handlerBody}",
				"}",
			"",
			"}"
		],
		"description": "Create a handler"
	},
	"Command Bus": {
		"prefix": ["command-bus", "cb"],
		"body": [
			"const { response, error } = await commandBus.execute(new ${1:commandName}());",
		]
	}
}